"""
Script de teste para verificar se a aplica√ß√£o PDF Chat RAG est√° funcionando corretamente.
Execute este script para validar a instala√ß√£o e configura√ß√£o.
"""

import os
import sys
import tempfile
from pathlib import Path

def test_imports():
    """Testa se todas as depend√™ncias est√£o instaladas"""
    print("üîç Testando imports...")
    
    try:
        import streamlit
        print("‚úÖ Streamlit importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar Streamlit: {e}")
        return False
    
    try:
        import langchain
        print("‚úÖ LangChain importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar LangChain: {e}")
        return False
    
    try:
        import fitz  # PyMuPDF
        print("‚úÖ PyMuPDF importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar PyMuPDF: {e}")
        return False
    
    try:
        import faiss
        print("‚úÖ FAISS importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar FAISS: {e}")
        return False
    
    try:
        from sentence_transformers import SentenceTransformer
        print("‚úÖ Sentence Transformers importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar Sentence Transformers: {e}")
        return False
    
    try:
        import replicate
        print("‚úÖ Replicate importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar Replicate: {e}")
        return False
    
    return True

def test_project_modules():
    """Testa se os m√≥dulos do projeto podem ser importados"""
    print("\nüîç Testando m√≥dulos do projeto...")
    
    try:
        from config import APP_TITLE, EMBEDDING_MODEL
        print(f"‚úÖ Config importado - App: {APP_TITLE}")
    except ImportError as e:
        print(f"‚ùå Erro ao importar config: {e}")
        return False
    
    try:
        from utils import create_directories, count_tokens
        print("‚úÖ Utils importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar utils: {e}")
        return False
    
    try:
        from rag_pipeline import RAGPipeline
        print("‚úÖ RAG Pipeline importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar rag_pipeline: {e}")
        return False
    
    return True

def test_embeddings():
    """Testa se o modelo de embeddings pode ser carregado"""
    print("\nüîç Testando modelo de embeddings...")
    
    try:
        from sentence_transformers import SentenceTransformer
        from config import EMBEDDING_MODEL
        
        model = SentenceTransformer(EMBEDDING_MODEL)
        print(f"‚úÖ Modelo de embeddings carregado: {EMBEDDING_MODEL}")
        
        # Testa uma infer√™ncia simples
        test_text = "Este √© um teste de embeddings."
        embedding = model.encode(test_text)
        print(f"‚úÖ Embedding gerado com sucesso (dimens√£o: {len(embedding)})")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao testar embeddings: {e}")
        return False

def test_pdf_processing():
    """Testa se o processamento de PDF funciona"""
    print("\nüîç Testando processamento de PDF...")
    
    try:
        import fitz
        from utils import extract_text_from_pdf
        
        # Cria um PDF de teste simples
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_file:
            # Cria um PDF b√°sico com PyMuPDF
            doc = fitz.open()
            page = doc.new_page()
            page.insert_text((50, 50), "Este √© um teste de processamento de PDF.")
            doc.save(tmp_file.name)
            doc.close()
            
            # Testa a extra√ß√£o
            chunks = extract_text_from_pdf(tmp_file.name)
            
            if chunks:
                print(f"‚úÖ PDF processado com sucesso - {len(chunks)} chunks extra√≠dos")
                os.unlink(tmp_file.name)
                return True
            else:
                print("‚ùå Nenhum chunk foi extra√≠do do PDF")
                os.unlink(tmp_file.name)
                return False
                
    except Exception as e:
        print(f"‚ùå Erro ao testar processamento de PDF: {e}")
        return False

def test_rag_pipeline():
    """Testa se o pipeline RAG pode ser inicializado"""
    print("\nüîç Testando pipeline RAG...")
    
    try:
        from rag_pipeline import RAGPipeline
        
        pipeline = RAGPipeline()
        print("‚úÖ Pipeline RAG inicializado com sucesso")
        
        # Testa estat√≠sticas
        stats = pipeline.get_index_stats()
        print(f"‚úÖ Estat√≠sticas do √≠ndice: {stats}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao testar pipeline RAG: {e}")
        return False

def test_directories():
    """Testa se os diret√≥rios necess√°rios podem ser criados"""
    print("\nüîç Testando cria√ß√£o de diret√≥rios...")
    
    try:
        from utils import create_directories
        from config import UPLOAD_FOLDER, CACHE_FOLDER, INDEX_FOLDER
        
        create_directories()
        
        for directory in [UPLOAD_FOLDER, CACHE_FOLDER, INDEX_FOLDER]:
            if os.path.exists(directory):
                print(f"‚úÖ Diret√≥rio criado: {directory}")
            else:
                print(f"‚ùå Diret√≥rio n√£o foi criado: {directory}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao testar cria√ß√£o de diret√≥rios: {e}")
        return False

def test_replicate_config():
    """Testa se a configura√ß√£o do Replicate est√° correta"""
    print("\nüîç Testando configura√ß√£o do Replicate...")
    
    try:
        import replicate
        from config import REPLICATE_API_TOKEN
        
        if REPLICATE_API_TOKEN:
            print("‚úÖ Token do Replicate configurado")
            return True
        else:
            print("‚ö†Ô∏è Token do Replicate n√£o configurado (opcional)")
            print("   Para usar o Mistral 7B, configure REPLICATE_API_TOKEN no arquivo .env")
            return True
    except Exception as e:
        print(f"‚ùå Erro ao testar configura√ß√£o do Replicate: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes da aplica√ß√£o PDF Chat RAG\n")
    
    tests = [
        ("Imports", test_imports),
        ("M√≥dulos do Projeto", test_project_modules),
        ("Embeddings", test_embeddings),
        ("Processamento de PDF", test_pdf_processing),
        ("Pipeline RAG", test_rag_pipeline),
        ("Diret√≥rios", test_directories),
        ("Configura√ß√£o Replicate", test_replicate_config),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"üß™ Teste: {test_name}")
        print('='*50)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")
    
    print(f"\n{'='*50}")
    print(f"üìä RESULTADO DOS TESTES")
    print('='*50)
    print(f"‚úÖ Testes passaram: {passed}/{total}")
    print(f"‚ùå Testes falharam: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ Todos os testes passaram! A aplica√ß√£o est√° pronta para uso.")
        print("\nPara executar a aplica√ß√£o:")
        print("   streamlit run app.py")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} teste(s) falharam. Verifique os erros acima.")
        print("\nPoss√≠veis solu√ß√µes:")
        print("1. Instale as depend√™ncias: pip install -r requirements.txt")
        print("2. Configure o token do Replicate (opcional)")
        print("3. Verifique se todos os arquivos est√£o presentes")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 